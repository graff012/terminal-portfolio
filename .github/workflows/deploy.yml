name: Deploy to Server with Docker Registry

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/terminal-portfolio:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/terminal-portfolio:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Deploy to EC2
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SSH_KEY: ${{ secrets.SSH_SECRET_KEY }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          DOCKER_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/terminal-portfolio:${{ github.sha }}
        run: |
          # Setup SSH key
          mkdir -p ~/.ssh
          printf '%s\n' "$SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "StrictHostKeyChecking no" >> ~/.ssh/config
          
          # Create .env file
          cat > .env << EOF
          RESEND_API_KEY=$RESEND_API_KEY
          EOF
          
          # Copy .env to server
          scp .env "$SERVER_USER@$SERVER_HOST:/home/ubuntu/app/.env"
          
          # Deploy via SSH
          ssh "$SERVER_USER@$SERVER_HOST" "
            set -e
            
            # Ensure app directory exists
            mkdir -p /home/ubuntu/app
            cd /home/ubuntu/app
            
            echo 'Stopping existing container...'
            sudo docker stop nextjs-container || true
            sudo docker rm nextjs-container || true
            
            echo 'Pulling latest Docker image...'
            sudo docker pull $DOCKER_IMAGE
            
            echo 'Starting new container...'
            sudo docker run -d \
              -p 3000:3000 \
              --name nextjs-container \
              --restart unless-stopped \
              --env-file .env \
              $DOCKER_IMAGE
            
            echo 'Cleaning up old images...'
            sudo docker image prune -f
            
            echo 'Deployment complete!'
            sudo docker ps | grep nextjs-container
          "
      
      - name: Clean up SSH key
        run: rm -rf ~/.ssh
